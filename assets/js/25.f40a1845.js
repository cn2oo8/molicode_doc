(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{194:function(t,n,s){"use strict";s.r(n);var a=s(0),e=Object(a.a)({},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("smartSegment，是一个代码片段自动处理工具。在日常的开发工作中，我们常常需要全文分析文件内容，对满足要求的代码片段进行替换，包裹，追加等功能。")]),t._v(" "),s("p",[t._v("smartSegment正是这样的工具，扫描文件或者整个工程，进行内容扫描分析，然后进行内容处理。smartSegment基于molicode的进行流程编排，然后用groovy脚本进行代码片段查找过滤，以及片段处理保存。")]),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("smartSegment 通过选中一个gsp（groovy template）脚本文件进行接口适配。利用groovy的动态编译特性和闭包的方便定义于使用。")]),t._v(" "),s("p",[t._v("groovy脚本需要实现的4个闭包:")]),t._v(" "),t._m(3),t._m(4),t._v(" "),s("p",[s("a",{attrs:{href:"https://gitee.com/zhangshibin1987/molicode-smart-segment",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gitee.com/zhangshibin1987/molicode-smart-segment"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("这个代码为什么要存储到gitee 里面？ 听说了么, github 受美国政府管控，哪天说不定不能访问了呢？ 所以新仓库都移到 gitee里面去了。")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._m(7),t._v(" "),s("p",[t._v("这个作者很懒，不想码那么多字，所以这里直接show code了，能干啥自己看看代码吧。")]),t._v(" "),t._m(8)])},[function(){var t=this.$createElement,n=this._self._c||t;return n("h1",{attrs:{id:"smartsegment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#smartsegment","aria-hidden":"true"}},[this._v("#")]),this._v(" smartSegment")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[this._v("#")]),this._v(" 简介")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"groovy脚本接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#groovy脚本接口","aria-hidden":"true"}},[this._v("#")]),this._v(" groovy脚本接口")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("segmentStartFinder 代码片段开始标记查询器;\n\nsegmentEndFinder 代码片段结束标记查询器;\n\nsegmentFilter 代码片段过滤器；\n\nsegmentProcess 代码片段处理器；\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"已有的智能代码片段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#已有的智能代码片段","aria-hidden":"true"}},[this._v("#")]),this._v(" 已有的智能代码片段")])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"示例代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 示例代码")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-groovy extra-class"},[s("pre",{pre:!0,attrs:{class:"language-groovy"}},[s("code",[s("span",{attrs:{class:"token operator"}},[t._v("<")]),s("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 可以直接使用的内置对象：\n     * jsonConfig 为前台录入的json参数转换后的对象；可以以json的方式直接读取；\n     * scriptContext 为和molicode进行脚本传递的上下文；所有闭包必须在最后传递到scriptContext里面；\n     * 工具类：\n     * JSON（FastJSON 工具类）\n     * StringUtils(apache commons 3), CollectionUtils(apache collections 4)\n     * PubUtils, tableNameUtil 系统自带；\n     */")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" jsonConfigLocal "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" jsonConfig"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 必须实现\n     *\n     * 代码片段开始查找器，返回true，意味着找到了开始行\n     * 以行为单位逐行进行查找，参数为：\n     * (String line, List<String> lineContentList, int lineIndex)\n     * 其中 line 为当前行内容， lineContentList 为所有行内容， lineIndex 为行标（0开始）\n     *\n     */")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" segmentStartFinder "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" line"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lineContentList"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lineIndex "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" line"),s("span",{attrs:{class:"token operator"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("contains")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jsonConfigLocal"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'segmentStart'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 必须实现\n     *\n     * 代码片段结束查找器，返回true，意味着找到了结束行\n     * 以行为单位逐行进行查找，参数为：\n     * (String line, List<String> lineContentList, int lineIndex)\n     * 其中 line 为当前行内容， lineContentList 为所有行内容， lineIndex 为行标（0开始）\n     *\n     */")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" segmentEndFinder "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" line"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lineContentList"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lineIndex "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" line"),s("span",{attrs:{class:"token operator"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("contains")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jsonConfigLocal"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'segmentEnd'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 可选实现，如果没有过滤器，只要在开始结束范围内的，均为满足条件的代码片段\n     *\n     * 代码片段过滤器，返回true，意味匹配，false以为不匹配；\n     *\n     * 参数为： (SegmentInfoBo segmentInfoBo)\n     * SegmentInfoBo 对象暂未提供说明，请看原始代码；\n     *\n     */")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" segmentFilter "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" segmentInfoBo "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" segmentContains "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" jsonConfigLocal"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'segmentContains'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segmentContains "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" segmentContains "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("''")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("true")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" originContent "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" segmentInfoBo"),s("span",{attrs:{class:"token operator"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("getOriginSegmentContent")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string gstring"}},[t._v('""')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" originContent"),s("span",{attrs:{class:"token operator"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("contains")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segmentContains"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 必须实现\n     *\n     * 代码片段处理执行器，会按返回结果替换掉原来的代码片段；\n     *\n     * (SegmentInfoBo segmentInfoBo)\n     * SegmentInfoBo 对象暂未提供说明，请看原始代码；\n     *\n     */")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" segmentProcess "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" segmentInfoBo "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" originContent "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" segmentInfoBo"),s("span",{attrs:{class:"token operator"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("getOriginSegmentContent")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string gstring"}},[t._v('""')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" replaceMap "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" jsonConfigLocal"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'replaceMap'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("replaceMap "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" null "),s("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" replaceMap"),s("span",{attrs:{class:"token operator"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" originContent"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        replaceMap"),s("span",{attrs:{class:"token operator"}},[t._v(".")]),t._v("each "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value "),s("span",{attrs:{class:"token operator"}},[t._v("->")]),t._v("\n            originContent"),s("span",{attrs:{class:"token operator"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("replaceAll")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" originContent"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 将以上处理器传递给molicode进行运算处理；\n     */")]),t._v("\n    scriptContext"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'segmentStartFinder'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" segmentStartFinder"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    scriptContext"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'segmentEndFinder'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" segmentEndFinder"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    scriptContext"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'segmentFilter'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" segmentFilter"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    scriptContext"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v("'segmentProcess'")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" segmentProcess"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{attrs:{class:"token operator"}},[t._v("%")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n说明：用于进行常用的文本替换功能。smartSegment脚本初始化成功！\n需要配合jsonConfig使用；\nauthor"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" david\nversion"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1.0")]),t._v("\n\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h2",{attrs:{id:"segmentinfobo-对象说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#segmentinfobo-对象说明","aria-hidden":"true"}},[this._v("#")]),this._v(" segmentInfoBo 对象说明")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("package")]),t._v(" com"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shareyi"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("molicode"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("common"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bo\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" com"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("google"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("common"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("collect"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Lists\n"),s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" com"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shareyi"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("molicode"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sdk"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dto"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ExtAttrDto\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("/**\n * 片段信息业务对象\n */")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("SegmentInfoBo")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("ExtAttrDto")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 片段line堆栈\n     */")]),t._v("\n    List"),s("span",{attrs:{class:"token generics function"}},[s("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String"),s("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" segmentLineStack "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Lists"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("newArrayList")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 全部文件的文档内容，指向对象\n     */")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" List"),s("span",{attrs:{class:"token generics function"}},[s("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String"),s("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" lineContentList"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 片段开始的行号\n     */")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" startLineIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 片段结束的行号\n     */")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" endLineIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 获取原样字符串\n     * @param prepend\n     * @return\n     */")]),t._v("\n    String "),s("span",{attrs:{class:"token function"}},[t._v("getOriginSegmentContent")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String prepend"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        def sb "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("StringBuilder")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" index "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" segmentLineStack"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("size")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" index"),s("span",{attrs:{class:"token operator"}},[t._v("++")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            String line "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" segmentLineStack"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("get")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                sb"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"\\n"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{attrs:{class:"token comment"}},[t._v("//前置内容")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prepend "),s("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" null "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" prepend"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("length")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                sb"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prepend"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            sb"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("append")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("line"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sb"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toString")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 通过行下标获取原文档中的内容\n     * @param lineIndex\n     * @return\n     */")]),t._v("\n    String "),s("span",{attrs:{class:"token function"}},[t._v("getOriginContentByLine")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" lineIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lineIndex "),s("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" lineContentList"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("size")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" null"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" lineContentList"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("get")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lineIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 通过相对坐标获取内容\n     *\n     * @param relativeIndex\n     * @return\n     */")]),t._v("\n    String "),s("span",{attrs:{class:"token function"}},[t._v("getLineByRelativeIndex")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" relativeIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" lineIndex "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token comment"}},[t._v("//不能取当前行")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("relativeIndex "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" null"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("relativeIndex "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            lineIndex "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" startLineIndex "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" relativeIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            lineIndex "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" endLineIndex "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" relativeIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lineIndex "),s("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" lineIndex "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" lineContentList"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("size")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" lineContentList"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("get")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lineIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" null"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("/**\n     * 构建\n     * @param strings\n     * @param i\n     * @return\n     */")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" SegmentInfoBo "),s("span",{attrs:{class:"token function"}},[t._v("create")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("List"),s("span",{attrs:{class:"token generics function"}},[s("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String"),s("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" lineContentList"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" startLineIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        SegmentInfoBo segmentInfoBo "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("SegmentInfoBo")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        segmentInfoBo"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lineContentList "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" lineContentList"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        segmentInfoBo"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startLineIndex "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" startLineIndex"),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" segmentInfoBo\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],!1,null,null,null);e.options.__file="smartSegment.md";n.default=e.exports}}]);